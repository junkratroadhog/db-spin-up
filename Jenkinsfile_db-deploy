pipeline {
    agent any

    parameters {
        string(
            name: 'CONFIG',
            // Set to 'true' to retain the DB container after the pipeline completes
            defaultValue: 'ORACLE_IMAGE=gvenzl/oracle-xe:21-slim,ORACLE_CNAME=usersdb,ORACLE_PORT=1525,RETAIN_DB=true,ORACLE_SID=XE,ORACLE_PDB=XEPDB1,ORACLE_PASSWORD=oracle,STOP_DB=false',  // default if not passed
            description: 'Comma-separated key=value pairs to override default environment variables. Supported keys: ORACLE_IMAGE, ORACLE_CNAME, ORACLE_PASSWORD, ORACLE_PORT, RETAIN_DB'
        )
    }
    environment {
        // Default values, can be overridden via CONFIG parameter
        // ORACLE_CNAME = 'usersdb'
        // ORACLE_PORT = '1525'
        // ORACLE_SID = 'XE'
        // ORACLE_PDB = 'XEPDB1'
        // ORACLE_IMAGE = 'gvenzl/oracle-xe:21-slim'
        // RETAIN_DB = 'true'
        // STOP_DB = 'false'
        ORACLE_PASSWORD = 'oracle'  // Default password for Oracle XE image
    }
    stages {

        stage('Debug CONFIG') {
            steps {
                echo "CONFIG received: '${params.CONFIG}'"
            }
        }

        stage('Parse CONFIG') {
            steps {
                script {
                    if (params.CONFIG?.trim()) {
                        params.CONFIG.split(',').each { kv ->
                            if (kv.contains('=')) {
                                def (k, v) = kv.split('=', 2)
                                env."${k.trim()}" = v.trim()
                            }
                        }
                    }
                    echo """
                    ORACLE_CNAME=${env.ORACLE_CNAME}
                    ORACLE_PORT=${env.ORACLE_PORT}
                    ORACLE_SID=${env.ORACLE_SID}
                    ORACLE_PDB=${env.ORACLE_PDB}
                    ORACLE_IMAGE=${env.ORACLE_IMAGE}
                    RETAIN_DB=${env.RETAIN_DB}
                    STOP_DB=${env.STOP_DB}
                    ORACLE_PASSWORD=${env.ORACLE_PASSWORD}
                    """
                }
            }
        }

        stage('Scripts List and Permission check') {
            steps{
                sh 'chmod +x scripts/deploy/*.sh'
            }
        }

        stage('Oracle Container Registry Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'OCR_CRED', 
                                                  usernameVariable: 'USR', 
                                                  passwordVariable: 'AUTH')]) {
                sh '''
                echo "${AUTH}" | docker login container-registry.oracle.com -u ${USR} --password-stdin
                '''
                }
            }
        }

        stage("Creating Oracle DB in Docker Container") {
            steps {
                sh '''
                ./scripts/deploy/deploy_create_oracle_container.sh
                '''
            }
        }

        stage('Validating Oracle DB in Container') {
            steps {
                    sh '''
                    ./scripts/deploy/deploy_validate_oracle_container.sh
                    '''
            } 
        }

        stage('Validation of DB & Listener Status'){
            steps{
                sh '''
                    ./scripts/deploy/deploy_final_validate.sh
                '''
            }
        }
    }

    post {
        always {
            sh ''' 
                    ./scripts/deploy/post_actions.sh
            '''
        }
    }      
}